@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// Font face
// ========================================================================== */
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
          eot: "?",
          svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
          otf: "opentype",
          ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    font-display: swap;
    src: $src;
  }
}

// Responsive
// ==================
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@mixin up($size) {
  $size: strip-unit($size);
  @media (min-width: $size + 1px) { @content; }
}

@mixin down($size) {
  $size: strip-unit($size);
  @media (max-width: $size * 1px) { @content; }
}

@mixin between($down, $up) {
  $down: strip-unit($down);
  $up: strip-unit($up);
  @media (min-width: $down + 1px) and (max-width: $up * 1px) { @content; }
}

// Spaces
// ==================
$space: 8px;

@function space($i) {
  @return $i * $space;
}

@each $i in 1, 2, 3, 4 {
  .mb-#{$i} {
    margin-bottom: space($i);
  }
  .mt-#{$i} {
    margin-top: space($i);
  }
}
